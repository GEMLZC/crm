<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.crm.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.crm.domain.Employee">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="age" jdbcType="INTEGER" property="age"/>
        <result column="admin" jdbcType="BIT" property="admin"/>
        <!--配置联表查询结果集映射-->
        <association property="dept" columnPrefix="d_" javaType="Department">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
        <!--发送额外sql查询用户角色-->
        <collection property="roles" select="cn.wolfcode.crm.mapper.RoleMapper.selectByEmployeeKey" ofType="Role"
                    column="id"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteEmployeeRoleById">
      delete from employee_role where employee_id = #{empId}
    </delete>
    <delete id="batchDeleteById">
        delete from employee where id in
        <foreach collection="array" open="(" separator="," close=")"  item="item">
            #{item}
        </foreach>
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.wolfcode.crm.domain.Employee"
            useGeneratedKeys="true">
    insert into employee (name, password, email, 
      age, admin, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
  </insert>
    <insert id="insertEmpAndRole">
        INSERT INTO employee_role VALUES (#{id},#{roleId})
    </insert>
    <update id="updateByPrimaryKey" parameterType="cn.wolfcode.crm.domain.Employee">
    update employee
    set name = #{name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      admin = #{admin,jdbcType=BIT},
      dept_id = #{dept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, name, email, age, admin, dept_id d_id
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select
        e.id, e.name, e.email, e.age, d.id d_id, d.name d_name
        from employee e left join department d on e.dept_id = d.id
        <include refid="EmpCondition"/>
    </select>
    <select id="seleteByUserAndPassword" resultType="cn.wolfcode.crm.domain.Employee">
        select id, name,password, email, age, admin, dept_id d_id
        from employee
        where name=#{username} and password=#{password}
    </select>
    <select id="selectAllName" resultMap="BaseResultMap">
        SELECT id,name from employee
    </select>
    <select id="selectByName" resultType="cn.wolfcode.crm.domain.Employee">
        select id, name,password, email, age, admin, dept_id d_id
        from employee
        where name=#{name}
    </select>
    <select id="selectAllForXsl" resultType="cn.wolfcode.crm.domain.Employee">
        select name, email, age
        from employee
    </select>
    <select id="selectByRoleSn" resultType="cn.wolfcode.crm.domain.Employee">
        select DISTINCT e.id,e.`name`
        from employee e left join employee_role er on e.id=er.employee_id
        left join role r on er.role_id=r.id
        where r.sn in
        <foreach collection="array" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </select>

    <sql id="EmpCondition">
        <where>
            <if test="keyword != null">
                and (e.name like concat('%',#{keyword},'%') or
                e.email like concat('%',#{keyword},'%') or
                e.age like concat('%',#{keyword},'%'))
            </if>
            <if test="deptId != -1 &amp;&amp; deptId != null">
                and e.dept_id = #{deptId}
            </if>
        </where>
    </sql>
</mapper>